# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import lore_pb2 as lore__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in lore_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LoreServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateCharacters = channel.unary_unary(
                '/lore.LoreService/GenerateCharacters',
                request_serializer=lore__pb2.CharactersRequest.SerializeToString,
                response_deserializer=lore__pb2.CharactersResponse.FromString,
                _registered_method=True)
        self.GenerateFactions = channel.unary_unary(
                '/lore.LoreService/GenerateFactions',
                request_serializer=lore__pb2.FactionsRequest.SerializeToString,
                response_deserializer=lore__pb2.FactionsResponse.FromString,
                _registered_method=True)
        self.GenerateSettings = channel.unary_unary(
                '/lore.LoreService/GenerateSettings',
                request_serializer=lore__pb2.SettingsRequest.SerializeToString,
                response_deserializer=lore__pb2.SettingsResponse.FromString,
                _registered_method=True)
        self.GenerateEvents = channel.unary_unary(
                '/lore.LoreService/GenerateEvents',
                request_serializer=lore__pb2.EventsRequest.SerializeToString,
                response_deserializer=lore__pb2.EventsResponse.FromString,
                _registered_method=True)
        self.GenerateRelics = channel.unary_unary(
                '/lore.LoreService/GenerateRelics',
                request_serializer=lore__pb2.RelicsRequest.SerializeToString,
                response_deserializer=lore__pb2.RelicsResponse.FromString,
                _registered_method=True)
        self.GenerateAll = channel.unary_unary(
                '/lore.LoreService/GenerateAll',
                request_serializer=lore__pb2.AllRequest.SerializeToString,
                response_deserializer=lore__pb2.AllResponse.FromString,
                _registered_method=True)
        self.GenerateFullStory = channel.unary_unary(
                '/lore.LoreService/GenerateFullStory',
                request_serializer=lore__pb2.FullStoryRequest.SerializeToString,
                response_deserializer=lore__pb2.FullStoryResponse.FromString,
                _registered_method=True)
        self.GenerateEmbedding = channel.unary_unary(
                '/lore.LoreService/GenerateEmbedding',
                request_serializer=lore__pb2.EmbeddingRequest.SerializeToString,
                response_deserializer=lore__pb2.EmbeddingResponse.FromString,
                _registered_method=True)
        self.RerankResults = channel.unary_unary(
                '/lore.LoreService/RerankResults',
                request_serializer=lore__pb2.RerankSearchRequest.SerializeToString,
                response_deserializer=lore__pb2.RerankSearchResponse.FromString,
                _registered_method=True)


class LoreServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GenerateCharacters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateFactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateRelics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateFullStory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateEmbedding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RerankResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateCharacters': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateCharacters,
                    request_deserializer=lore__pb2.CharactersRequest.FromString,
                    response_serializer=lore__pb2.CharactersResponse.SerializeToString,
            ),
            'GenerateFactions': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateFactions,
                    request_deserializer=lore__pb2.FactionsRequest.FromString,
                    response_serializer=lore__pb2.FactionsResponse.SerializeToString,
            ),
            'GenerateSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateSettings,
                    request_deserializer=lore__pb2.SettingsRequest.FromString,
                    response_serializer=lore__pb2.SettingsResponse.SerializeToString,
            ),
            'GenerateEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateEvents,
                    request_deserializer=lore__pb2.EventsRequest.FromString,
                    response_serializer=lore__pb2.EventsResponse.SerializeToString,
            ),
            'GenerateRelics': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateRelics,
                    request_deserializer=lore__pb2.RelicsRequest.FromString,
                    response_serializer=lore__pb2.RelicsResponse.SerializeToString,
            ),
            'GenerateAll': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateAll,
                    request_deserializer=lore__pb2.AllRequest.FromString,
                    response_serializer=lore__pb2.AllResponse.SerializeToString,
            ),
            'GenerateFullStory': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateFullStory,
                    request_deserializer=lore__pb2.FullStoryRequest.FromString,
                    response_serializer=lore__pb2.FullStoryResponse.SerializeToString,
            ),
            'GenerateEmbedding': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateEmbedding,
                    request_deserializer=lore__pb2.EmbeddingRequest.FromString,
                    response_serializer=lore__pb2.EmbeddingResponse.SerializeToString,
            ),
            'RerankResults': grpc.unary_unary_rpc_method_handler(
                    servicer.RerankResults,
                    request_deserializer=lore__pb2.RerankSearchRequest.FromString,
                    response_serializer=lore__pb2.RerankSearchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lore.LoreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lore.LoreService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LoreService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GenerateCharacters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lore.LoreService/GenerateCharacters',
            lore__pb2.CharactersRequest.SerializeToString,
            lore__pb2.CharactersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateFactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lore.LoreService/GenerateFactions',
            lore__pb2.FactionsRequest.SerializeToString,
            lore__pb2.FactionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lore.LoreService/GenerateSettings',
            lore__pb2.SettingsRequest.SerializeToString,
            lore__pb2.SettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lore.LoreService/GenerateEvents',
            lore__pb2.EventsRequest.SerializeToString,
            lore__pb2.EventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateRelics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lore.LoreService/GenerateRelics',
            lore__pb2.RelicsRequest.SerializeToString,
            lore__pb2.RelicsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lore.LoreService/GenerateAll',
            lore__pb2.AllRequest.SerializeToString,
            lore__pb2.AllResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateFullStory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lore.LoreService/GenerateFullStory',
            lore__pb2.FullStoryRequest.SerializeToString,
            lore__pb2.FullStoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateEmbedding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lore.LoreService/GenerateEmbedding',
            lore__pb2.EmbeddingRequest.SerializeToString,
            lore__pb2.EmbeddingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RerankResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lore.LoreService/RerankResults',
            lore__pb2.RerankSearchRequest.SerializeToString,
            lore__pb2.RerankSearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
