// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: lore.proto

package lorepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoreService_GenerateCharacters_FullMethodName = "/lore.LoreService/GenerateCharacters"
	LoreService_GenerateFactions_FullMethodName   = "/lore.LoreService/GenerateFactions"
	LoreService_GenerateSettings_FullMethodName   = "/lore.LoreService/GenerateSettings"
	LoreService_GenerateEvents_FullMethodName     = "/lore.LoreService/GenerateEvents"
	LoreService_GenerateRelics_FullMethodName     = "/lore.LoreService/GenerateRelics"
	LoreService_GenerateAll_FullMethodName        = "/lore.LoreService/GenerateAll"
	LoreService_GenerateFullStory_FullMethodName  = "/lore.LoreService/GenerateFullStory"
)

// LoreServiceClient is the client API for LoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoreServiceClient interface {
	GenerateCharacters(ctx context.Context, in *CharactersRequest, opts ...grpc.CallOption) (*CharactersResponse, error)
	GenerateFactions(ctx context.Context, in *FactionsRequest, opts ...grpc.CallOption) (*FactionsResponse, error)
	GenerateSettings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsResponse, error)
	GenerateEvents(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	GenerateRelics(ctx context.Context, in *RelicsRequest, opts ...grpc.CallOption) (*RelicsResponse, error)
	GenerateAll(ctx context.Context, in *AllRequest, opts ...grpc.CallOption) (*AllResponse, error)
	GenerateFullStory(ctx context.Context, in *FullStoryRequest, opts ...grpc.CallOption) (*FullStoryResponse, error)
}

type loreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoreServiceClient(cc grpc.ClientConnInterface) LoreServiceClient {
	return &loreServiceClient{cc}
}

func (c *loreServiceClient) GenerateCharacters(ctx context.Context, in *CharactersRequest, opts ...grpc.CallOption) (*CharactersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CharactersResponse)
	err := c.cc.Invoke(ctx, LoreService_GenerateCharacters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loreServiceClient) GenerateFactions(ctx context.Context, in *FactionsRequest, opts ...grpc.CallOption) (*FactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FactionsResponse)
	err := c.cc.Invoke(ctx, LoreService_GenerateFactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loreServiceClient) GenerateSettings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettingsResponse)
	err := c.cc.Invoke(ctx, LoreService_GenerateSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loreServiceClient) GenerateEvents(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, LoreService_GenerateEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loreServiceClient) GenerateRelics(ctx context.Context, in *RelicsRequest, opts ...grpc.CallOption) (*RelicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelicsResponse)
	err := c.cc.Invoke(ctx, LoreService_GenerateRelics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loreServiceClient) GenerateAll(ctx context.Context, in *AllRequest, opts ...grpc.CallOption) (*AllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllResponse)
	err := c.cc.Invoke(ctx, LoreService_GenerateAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loreServiceClient) GenerateFullStory(ctx context.Context, in *FullStoryRequest, opts ...grpc.CallOption) (*FullStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FullStoryResponse)
	err := c.cc.Invoke(ctx, LoreService_GenerateFullStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoreServiceServer is the server API for LoreService service.
// All implementations must embed UnimplementedLoreServiceServer
// for forward compatibility.
type LoreServiceServer interface {
	GenerateCharacters(context.Context, *CharactersRequest) (*CharactersResponse, error)
	GenerateFactions(context.Context, *FactionsRequest) (*FactionsResponse, error)
	GenerateSettings(context.Context, *SettingsRequest) (*SettingsResponse, error)
	GenerateEvents(context.Context, *EventsRequest) (*EventsResponse, error)
	GenerateRelics(context.Context, *RelicsRequest) (*RelicsResponse, error)
	GenerateAll(context.Context, *AllRequest) (*AllResponse, error)
	GenerateFullStory(context.Context, *FullStoryRequest) (*FullStoryResponse, error)
	mustEmbedUnimplementedLoreServiceServer()
}

// UnimplementedLoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoreServiceServer struct{}

func (UnimplementedLoreServiceServer) GenerateCharacters(context.Context, *CharactersRequest) (*CharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCharacters not implemented")
}
func (UnimplementedLoreServiceServer) GenerateFactions(context.Context, *FactionsRequest) (*FactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFactions not implemented")
}
func (UnimplementedLoreServiceServer) GenerateSettings(context.Context, *SettingsRequest) (*SettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSettings not implemented")
}
func (UnimplementedLoreServiceServer) GenerateEvents(context.Context, *EventsRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEvents not implemented")
}
func (UnimplementedLoreServiceServer) GenerateRelics(context.Context, *RelicsRequest) (*RelicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRelics not implemented")
}
func (UnimplementedLoreServiceServer) GenerateAll(context.Context, *AllRequest) (*AllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAll not implemented")
}
func (UnimplementedLoreServiceServer) GenerateFullStory(context.Context, *FullStoryRequest) (*FullStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFullStory not implemented")
}
func (UnimplementedLoreServiceServer) mustEmbedUnimplementedLoreServiceServer() {}
func (UnimplementedLoreServiceServer) testEmbeddedByValue()                     {}

// UnsafeLoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoreServiceServer will
// result in compilation errors.
type UnsafeLoreServiceServer interface {
	mustEmbedUnimplementedLoreServiceServer()
}

func RegisterLoreServiceServer(s grpc.ServiceRegistrar, srv LoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoreService_ServiceDesc, srv)
}

func _LoreService_GenerateCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoreServiceServer).GenerateCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoreService_GenerateCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoreServiceServer).GenerateCharacters(ctx, req.(*CharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoreService_GenerateFactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoreServiceServer).GenerateFactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoreService_GenerateFactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoreServiceServer).GenerateFactions(ctx, req.(*FactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoreService_GenerateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoreServiceServer).GenerateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoreService_GenerateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoreServiceServer).GenerateSettings(ctx, req.(*SettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoreService_GenerateEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoreServiceServer).GenerateEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoreService_GenerateEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoreServiceServer).GenerateEvents(ctx, req.(*EventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoreService_GenerateRelics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoreServiceServer).GenerateRelics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoreService_GenerateRelics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoreServiceServer).GenerateRelics(ctx, req.(*RelicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoreService_GenerateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoreServiceServer).GenerateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoreService_GenerateAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoreServiceServer).GenerateAll(ctx, req.(*AllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoreService_GenerateFullStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoreServiceServer).GenerateFullStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoreService_GenerateFullStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoreServiceServer).GenerateFullStory(ctx, req.(*FullStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoreService_ServiceDesc is the grpc.ServiceDesc for LoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lore.LoreService",
	HandlerType: (*LoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateCharacters",
			Handler:    _LoreService_GenerateCharacters_Handler,
		},
		{
			MethodName: "GenerateFactions",
			Handler:    _LoreService_GenerateFactions_Handler,
		},
		{
			MethodName: "GenerateSettings",
			Handler:    _LoreService_GenerateSettings_Handler,
		},
		{
			MethodName: "GenerateEvents",
			Handler:    _LoreService_GenerateEvents_Handler,
		},
		{
			MethodName: "GenerateRelics",
			Handler:    _LoreService_GenerateRelics_Handler,
		},
		{
			MethodName: "GenerateAll",
			Handler:    _LoreService_GenerateAll_Handler,
		},
		{
			MethodName: "GenerateFullStory",
			Handler:    _LoreService_GenerateFullStory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lore.proto",
}
